set auto-load self-path /

python # type: ignore

import math
import re
from typing import Any, Iterator
import gdb # type: ignore

class pyObject(gdb._PrettyPrinter):
    def __init__(self, pyClass: str, pyObj: gdb.Value):
        self._object = pyObj
        self._class = pyClass
        self._string = ""
        self.name: str= self._class
    
    def __str__(self) -> str:
        return self._class
    
    def to_string(self) -> str | gdb.LazyString:
        return self._string
    
    def display_hint(self) -> str | None: ...
    def childreen(self) -> Iterator[tuple[str, gdb._ValueOrNative]]: ...

class pyPrinter(gdb.printing.PrettyPrinter):
    def __init__(self) -> None:
        super().__init__("Core24", None)
        self._regex = re.compile("^([a-zA-Z0-9_]+)(<.*>)?((::)([a-zA-Z0-9_]+)(<.*>)?)*$")
        self._views = []
    
    def __call__(self, val: gdb.Value) -> gdb._PrettyPrinter | None:
        t = val.type
        if t.code == gdb.TYPE_CODE_REF:
            t = t.target()
            if hasattr(val, "referenced_value"):
                val = val.referenced_value();
        t = t.unqualified().strip_typedefs();
        if t is None:
            return None
        if val.dynamic_type is not None:
            t = val.dynamic_type
        success: list[gdb.printing.SubPrettyPrinter] = []
        for sp in self.subprinters:
            regex = re.compile(sp.name)
            if regex is None:
                continue
            elif regex.match(t.name) is None:
                continue
            else:
                success.append(sp)
        maxlen = 0
        i = -1
        j = 0
        for sp in success:
            if len(sp.name) > maxlen:
                i = j
            j += 1
        if i != -1:
            return success[i];
        return None
    
    def update(self, pyClass: str, pyObjClass: type):
        if self._regex.match(pyClass):
            if pyClass in self._views:
                i = self._views.index(pyClass)
                self.subprinters[i] = pySubPrinter(pyClass, pyObjClass)
            else:
                self._views.append(pyClass)
                self.subprinters.append(pySubPrinter(pyClass, pyObjClass))

class pySubPrinter(gdb.printing.SubPrettyPrinter):
    def __init__(self, name: str, pyObjClass) -> None:
        super().__init__(name)
        self._caller = pyObjClass

    def print(self, pyObj: gdb.Value):
        if pyObj.type.code == gdb.TYPE_CODE_REF:
            if hasattr(pyObj, "referenced_value"):
                pyObj = pyObj.referenced_value()
        return self._caller(pyObj.type.name, pyObj)
    
    def __str__(self) -> str:
        return self.name

pyCore24 = pyPrinter()

def pyRegister():
    global pyCore24
    if pyCore24 is None:
        pyCore24 = pyPrinter()
    objFile = gdb.current_objfile()
    if objFile is not None:
        objFile.pretty_printers.append(pyCore24)
    else:
        gdb.pretty_printers.append(pyCore24)

class pyIterator(Iterator):
    def __init__(self, pyItems: list[tuple[str, gdb._ValueOrNative]]) -> None:
        super().__init__()
        self._next = 0
        self._items = pyItems
    
    def __iter__(self) -> Iterator:
        return self
    
    def __next__(self) -> Any:
        if self._next >= len(self._items):
            raise StopIteration(self._next)
        else:
            self._next += 1
            return self._items[self._next-1]

class pyCollection(pyObject):
    def __init__(self, pyClass: str, pyObj: gdb.Value):
        super().__init__(pyClass, pyObj)
        self._string = None
        self._hint = "[]"
        self._items = []
    
    def to_string(self) -> str | gdb.LazyString:
        return ""
    
    def display_hint(self) -> str | None:
        return self._hint
    
    def childreen(self) -> Iterator[tuple[str, gdb._ValueOrNative]]:
        return pyIterator(self._items)
    
class pyBasicArray(pyCollection):
    def __init__(self, pyClass: str, pyObj: gdb.Value):
        super().__init__(pyClass, pyObj)
        count = pyObj['count']
        value = pyObj['value']
        if value == 0 or count < 0:
            self._items = []
        else:
            self._items = [(str(i), value[i]) for i in range(count)]
        self._hint = pyClass

class pyBasicType(pyObject):
    def __init__(self, pyClass: str, pyObj: gdb.Value):
        super().__init__(pyClass, pyObj)
        self._string = str(pyObj['value'])

class pyNil(pyObject):
    def __init__(self, pyClass: str, pyObj: gdb.Value):
        super().__init__(pyClass, pyObj)
        self._string = "NULL"

class pyBasicString(pyObject):
    def __init__(self, pyClass: str, pyObj: gdb.Value):
        super().__init__(pyClass, pyObj)
        count = pyObj['count']
        compact = pyObj['COMPACT_STRINGS']
        value = pyObj['value']
        coder = pyObj['coder']
        if compact:
            if coder == 0:
                strT = gdb.lookup_type('char').const().pointer()
                value = value.reinterpret_cast(strT)
                if hasattr(value, 'lazy_string'):
                    self._string = value.lazy_string(length=count)
                else:
                    chars: list[str] = [chr(value[i] & 0xff) for i in range(count)]
                    self._string = '\"' + str.join('', chars) + '\"'
            else:
                self._string = '\"\"'
        else:
            if coder == 1:
                strT = gdb.lookup_type('char16_t').const().pointer()
                value = value.reinterpret_cast(strT)
                if hasattr(value, 'lazy_string'):
                    self._string = value.lazy_string(length=count)
                else:
                    chars: list[str] = [chr(value[i] & 0xff) for i in range(count)]
                    self._string = '\"' + str.join('', chars) + '\"'
            else:
                self._string = '\"\"'

class pyThrowable(pyObject):
    def __init__(self, pyClass: str, pyObj: gdb.Value):
        super().__init__(pyClass, pyObj)
        self._string = str(pyObj['detailMessage'])

class pyComplex(pyObject):
    def __init__(self, pyClass: str, pyObj: gdb.Value):
        super().__init__(pyClass, pyObj)
        r = pyObj['re']
        i = pyObj['img']
        self._string = ""
        if r != 0.0:
            self._string = str(r)
            plus = ""
        else:
            plus = '+'
        if i < 0:
            if math.isinf(i):
                self._string += '-(inf)i'
            else:
                self._string += str(i) + 'i'
        elif i > 0:
            if math.isinf(i):
                self._string += plus + '(inf)i'
            else:
                self._string += plus + str(i) + 'i'
        elif i != 0:
            self._string += plus + '(nan)i'

def pyUpdate():
    global pyCore24
    if pyCore24 is None:
        pyCore24 = pyPrinter()
    
    # core::BooleanArray
    # core::ByteArray
    # core::ShortArray
    # core::CharArray
    # core::IntArray
    # core::FloatArray
    # core::LongArray
    # core::DoubleArray
    pyCore24.update("^core::(Boolean|Byte|Short|Char|Int|Float|Long|Double)Array$", pyBasicArray)

    # core::Boolean
    # core::Byte
    # core::Short
    # core::Character
    # core::Integer
    # core::Float
    # core::Long
    # core::Double
    # core::AtomicBoolean
    # core::AtomicInteger
    # core::AtomicLong
    # core::Enum<E>
    pyCore24.update("^core::((Byte|Short|Character|Float|Double)|(Enum<.*>)|(Atomic)?(Boolean|Integer|Long))$", pyBasicType)

    # core::String
    # core::XString
    pyCore24.update("^core::((X)?String)", pyBasicString)

    # core::Throwable
    # core::[...]Exception
    # core::[...]Error
    pyCore24.update("^core::((Throwable) | (.*)(Exception|Error))$")

    # core::misc::NIL
    pyCore24.update("^core::misc::NILL$", pyNil)

    # core::Complex
    pyCore24.update("^core::Complex$", pyComplex)

pyUpdate()
pyRegister()

